#!/usr/bin/python
import os.path
import sys
import time
import email.parser
import multiprocessing
import traceback
import nltk
from message_decorator import MessageDecorator
from neo4j_loader import neo4jLoader
from word_counter import wordCounter

def parser_worker(fileQ, loaderQ):
    parser = email.parser.Parser()
    counter = wordCounter()

    try:
        while True:
            fileName = fileQ.get()
            if debug and fileName is not None:
                print "PARSING: " + fileName
            if fileName is None:
                fileQ.task_done()
                break
            
            rootLen = len(sys.argv[1])
            if fileName[rootLen] == '/' or fileName[rootLen] == '\\':
                rootLen += 1
            
            email_msg = MessageDecorator.from_file(fileName)
            eFile = fileName[rootLen:]
            if len(email_msg.message._headers) > 0:
                t = email_msg.message._headers[0]
                if t[1] == 'VCARD':
                    "vcard - skip"
                elif t[1] == 'VCALENDAR':
                    "vcalendar - skip"
                else:
                    email_msg.word_counts=counter.common_word_counts(email_msg)
                    loaderQ.put( (email_msg, eFile) )

            fileQ.task_done()
            
    except Exception, e:
        print e
        traceback.print_exc()
        pass

    loaderQ.put(None)
    return

def traverse_dir(folder):
    for root,dirs,files in os.walk(folder):
        loader.msg("Examining folder: " + root)
        for name in files:
            yield (os.path.join(root, name))
    return

def service_loader_q(loaderQ, block, numRunning, debug):
    try:
        while numRunning > 0:
            if (block):
                item = loaderQ.get()
            else: 
                item = loaderQ.get_nowait()

            if item == None:
                numRunning = numRunning - 1
            else:
                loader.add(item[0], item[1])
    except Exception,e:
        pass

    return numRunning


def process_args():
    import argparse

    parser = argparse.ArgumentParser(description='Load emails into Minezy')
    parser.add_argument('-d', '--depot_dir', required=True,
                       help="The [depot_dir] parameter should point to a parent folder of a parsed PST dump (eg: as generated by <a href='http://www.five-ten-sg.com/libpst/rn01re01.html'>readpst</a> tool)")
    parser.add_argument('-n', '--depot_name',  default="Un-named", help='Name of the account')
    parser.add_argument('-p', '--processes', default=8, type=int, help="Number of parallel processes to use to parse emails ")
    parser.add_argument('-v', '--verbose', nargs='?', const=True, default=False, type=bool, help="Print additional progress output")
    opts = neo4jLoader.options()
    parser.add_argument('-l', '--load_options', nargs='*', choices=opts, default=opts, help="Select which email elements to load.")
    parser.add_argument('-s', '--sample', default=1, type=int, help="Use every n-th email from the depot (used for debugging).")

    return parser.parse_args()

def num_files_in_dir(dir):
    numFiles = 0
    for fileName in traverse_dir(args.depot_dir):
        numFiles = numFiles + 1
    return numFiles

def process_dir(dir, loader, numProcs, debug):
    numRunning = numProcs

    # using multiprocessing and generator 'traverse_dir' to speed things up
    fileQ = multiprocessing.JoinableQueue(1000)
    loaderQ = multiprocessing.Queue(1000*numProcs)
    
    procs = []
    for i in range(numProcs):
        p = multiprocessing.Process(target=parser_worker, args=(fileQ,loaderQ, debug))
        procs.append(p)
        p.start()
    
    numFiles = num_files_in_dir(args.depot_dir)
    fileNum = 0
    for fileName in traverse_dir(args.depot_dir):
        if (fileNum % args.sample) != 0:
            fileNum = fileNum + 1
            continue

        while True:
            try:
                fileQ.put(fileName, True, 1)
                fileNum = fileNum + 1
                if debug:
                    print "QUEUED: " + str(fileNum) + " of " + str(numFiles)
                break
            except Exception,e:
                print e
                numRunning = service_loader_q(loaderQ, False, numRunning, debug)

    for i in range(len(procs)):
        fileQ.put(None)

    service_loader_q(loaderQ, True, numRunning, debug)
    fileQ.join()

if __name__ == '__main__':
    t0 = time.time()
    args = process_args();

    account = args.depot_dir.replace("\\", "/").replace("//", "/")
    loader = neo4jLoader(account, args.load_options, args.depot_name, args.verbose)
    
    process_dir(args.depot_dir, loader, args.processes, args.verbose)

    loader.complete()
    t1 = time.time()
    
    print "All Done ("+str(t1-t0) + " seconds)"
    
    